generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model scorer{
  id String @id @default(uuid())
  firstname String
  lastname String
  email String @unique
  password String
  createdAt DateTime @default(now())
}

model Team {
  id String @id @default(uuid())
  name String
  roomId String? @unique
  roompassword String?
  players Player[]
  matches1 Match[] @relation("Team1ToMatch")
  matches2 Match[] @relation("Team2ToMatch")
  results Result[]
  innings Innings[]
  createdAt DateTime @default(now())
}

model Player{
  id String @id @default(uuid())
  name String
  email String? @unique
  password String?
  teamId String?
  team Team? @relation(fields: [teamId], references: [id])
  battingHand String
  bowlingStyle String?
  role String
  bowlingStats CurrentBowlingStats[]
  battingstats BatsmanStats[]
  currentBattingStatsstrike CurrentBattingStats[] @relation("CurrentBattingStatsstrike")
  currentBattingStatsnonstrike CurrentBattingStats[] @relation("CurrentBattingStatsnonstrike")
  dismisals Dismisals[]
  bowlerStats BowlerStats[]
  createdAt DateTime @default(now())
}

model Match{
  id String @id @default(uuid())
  team1Id String
  team1 Team @relation("Team1ToMatch", fields: [team1Id], references: [id])
  team2Id String
  team2 Team @relation("Team2ToMatch", fields: [team2Id], references: [id])
  overs Int?
  innings Innings[]
  result Result[]
  bowlingStats BowlerStats[]
  battingStats BatsmanStats[]
  createdAt DateTime @default(now())
}

model Result{
  id String @id @default(uuid())
  matchId String
  match Match @relation(fields: [matchId], references: [id])
  winnerId String
  winner Team @relation(fields: [winnerId], references: [id])
  createdAt DateTime @default(now())
}

model Innings{
  id String @id @default(uuid())
  inningsNumber Int
  inningsType String
  matchId String
  match Match @relation(fields: [matchId], references: [id])
  teamId String
  team Team @relation(fields: [teamId], references: [id])
  totalRuns ScoreCard[]
  battingStats BatsmanStats[]
  bowlingStats BowlerStats[]
  currentBattingStats CurrentBattingStats[]
  currentbattingstats CurrentBowlingStats[]
  dismisals Dismisals[]
  createdAt DateTime @default(now())
}

model ScoreCard{
  id String @id @default(uuid())
  inningsId String
  innings Innings @relation(fields: [inningsId], references: [id])
  runs Int
  wickets Int
  overs Float
  createdAt DateTime @default(now())
}

model Dismisals{
  id String @id @default(uuid())
  inningsId String
  innings Innings @relation(fields: [inningsId], references: [id])
  batsmanId String
  batsman Player @relation(fields: [batsmanId], references: [id])
  dismisalType String
  CurrentBattingStats CurrentBattingStats[]
  createdAt DateTime @default(now())

}





model CurrentBowlingStats{
  id String @id @default(uuid())
  inningsId String
  innings Innings @relation(fields: [inningsId], references: [id])
  bowlerId String
  bowler Player @relation(fields: [bowlerId], references: [id])
  overNumber Int
  overs Float
  ballsBowled Int
  wickets Int
  wide Int
  noBall Int
  runs Int
  createdAt DateTime @default(now())
}

model CurrentBattingStats{
  id String @id @default(uuid())
  inningsId String
  innings Innings @relation(fields: [inningsId], references: [id])
  strickerId String
  Stiker Player @relation("CurrentBattingStatsstrike",fields: [strickerId], references: [id])
  nonStrickerId String
  nonStricker Player @relation("CurrentBattingStatsnonstrike",fields: [nonStrickerId], references: [id])
  runs Int
  balls Int
  dismisalId String?
  dismisal Dismisals? @relation(fields: [dismisalId], references: [id])
  createdAt DateTime @default(now())
}


model BatsmanStats{
  id String @id @default(uuid())
  playerId String
  player Player @relation(fields: [playerId], references: [id])
  matchId String
  match Match @relation(fields: [matchId], references: [id])
  inningsId String
  innings Innings @relation(fields: [inningsId], references: [id])
  balls Int
  runs Int
  createdAt DateTime @default(now())
}


model BowlerStats{
  id String @id @default(uuid())
  matchId String
  match Match @relation(fields: [matchId], references: [id])
  inningsId String
  innings Innings @relation(fields: [inningsId], references: [id])
  playerId String
  player Player @relation(fields: [playerId], references: [id])
  overs Float
  runs Int
  wickets Int
  createdAt DateTime @default(now())
}






